- Aula 12.4:
    - Pool de Conexões: grupo de conexões estabelecidas [com o BD] para serem usadas
    - Ao invés de toda requisição que precisa do banco criar uma nova conexão (algo custoso), 
        é usado uma conexão já existente
    - Fatores que influenciam o Pool de Conexões:
        1. cores da máquina da aplicação
        2. Rede
        3. Performance da máquina do BD
    - Pode ter um número de cors maior do que a máquina da aplicação porque tem a espera
        da comunicação com o banco de dados, que faz com que a thread da requisição fique
        em espera, podendo assim, ser utilizada para atender outra requisição
    - Fórmula de base: NCors * 2 (mais para aplicações com muita demanda)
    - Propriedade "connectionTimeout": tempo máximo de espera de uma requisição com o Pool
    - Propriedade "idleTimeout": utilizar quando usar o "minimumIdle". Se as conexões ficar
        um tempo determinado sem uso, elas serão removidas do Pool (respeitando o valor mínimo de "minimumIdle")
    - Propriedade "minimumIdle": mínimo de conexões que poderão ficar ociosas
    - Propriedade "maximumIdle": máximo de conexões do Pool
    - Propriedade "maximumLifeTime": o tempo que uma conexão ficará no Pool de Conexões (tempo de vida dela).
        Configurar com um tempo menor do que o BD permite
    - Propriedade "maximumPoolSize": máximo de conexões com o BD
-------------------------------------------------------------------------------------

- Aula 12.8. O problema do @OneToOne com o lazy (com o Hibernate):
    - Atributo que não é o proprietário da relação (usa o "mappedBy"), não dá pra colocar
        ele como "LAZY"
-------------------------------------------------------------------------------------

- Aula 12.9:
    - Entity Graph: sobrescreve configurações de mapeamento entre Entidades. Ex: se um mapeamento
        em determinada consulta precisa ser EAGER, mas está como LAZY
    - entityGraph.addAttributeNodes("dataCriacao", "status", "total", "notaFiscal"): traz somente
        os atributos especificados, mesmo que na entidade de origem tenha atributos como EAGER
    - jakarta.persistence.loadgraph: Traz todas as propriedades informadas e mantém o comportamento
        padrão na entidade (o que for EAGER permanece como EAGER e o que for LAZY permanece como LAZY),
        ou seja, aquelas propriedades que forem EAGER irá trazer e as que forem LAZY não serão buscadas
    - jakarta.persistence.fetchgraph: traz todas as propriedades informadas independente se elas sejam LAZY.
        As propriedades não informadas, serão tratadas como LAZY
-------------------------------------------------------------------------------------

- Aula 12.10:
    - Subgraph: o ID sempre é trazido já de forma implícita (sempre é tratado como EAGER)
------------------------------------------------------------------------------------

- Aula 12.14:
    - Hibernate: quando é feito um mapeamento entre entidades, a entidade mapeada fica no cache,
        assim quando há outras consultas, é verificado se um determinado registro da entidade mapeada
        já se encontra no cache antes de fazer a consulta no BD
------------------------------------------------------------------------------------